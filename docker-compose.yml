version: '3.9'

volumes:
  postgres_data:
  mysql_data:
  sqlite_data:

services:
  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "81:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - liquid_glass_ui
      - bot_core
      - mcp_server
      - aws_inventory_service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  mcp_server:
    build:
      context: ../../PycharmProjects/SREBOT/sre-genai
      dockerfile: mcp_server/Dockerfile
    container_name: mcp_server
    ports:
      - "5001:5000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - sqlite_data:/tmp
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-us-east-1}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  mcp_client:
    build: mcp_client
    container_name: mcp_client
    depends_on:
      - mcp_server

  bot_core:
    build:
      context: ../../PycharmProjects/SREBOT/sre-genai
      dockerfile: bot_core/Dockerfile
    container_name: bot_core
    ports:
      - "6000:6000"
    depends_on:
      - mcp_server
    environment:
      - MCP_SERVER_URL=http://mcp_server:5000
      - ISENGARD_PRODUCTION_ACCOUNT=false
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}
      - AWS_REGION=${AWS_REGION:-us-east-1}

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  aws_inventory_service:
    build: aws_inventory_service
    container_name: aws_inventory_service
    ports:
      - "5002:5002"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  postgres_db:
    image: postgres:15
    container_name: postgres_db
    environment:
      POSTGRES_DB: testdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  mysql_db:
    image: mysql:8.0
    container_name: mysql_db
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: testdb
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-ppassword"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  sqlite_db:
    image: alpine:latest
    container_name: sqlite_db
    command: sh -c "apk add --no-cache sqlite && tail -f /dev/null"
    volumes:
      - sqlite_data:/tmp

  slow_query_app:
    build: slow_query_app
    container_name: slow_query_app
    restart: always
    depends_on:
      - postgres_db

  connection_leak_app:
    build: connection_leak_app
    container_name: connection_leak_app
    restart: always
    depends_on:
      - mysql_db

  lock_contention_app:
    build: lock_contention_app
    container_name: lock_contention_app
    restart: always
    depends_on:
      - sqlite_db

  memory_bloat_app:
    build: memory_bloat_app
    container_name: memory_bloat_app
    restart: always
    depends_on:
      - postgres_db

  data_seeder:
    build: data_seeder
    container_name: data_seeder
    depends_on:
      - postgres_db
      - mysql_db
      - sqlite_db
    volumes:
      - sqlite_data:/tmp



  # Liquid Glass UI (Modern React UI)
  liquid_glass_ui:
    build: liquid-glass-ui
    container_name: liquid_glass_ui
    ports:
      - "8080:80"
    depends_on:
      - bot_core
      - mcp_server
      - aws_inventory_service
      - data_seeder
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Streamlit UI (Legacy) - Moved to unused/ folder

  # Unified Claude Service (Consolidates all AI endpoints)
  unified_claude:
    build: unified_claude_service
    container_name: unified_claude
    ports:
      - "7000:7000"
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}
      - AWS_REGION=${AWS_REGION:-us-east-1}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

